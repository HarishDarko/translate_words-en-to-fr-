# -*- coding: utf-8 -*-
"""word_challenge.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-iuKU68ERJje1BkqddyPQK8u2kNYQarh
"""

pip install googletrans

pip install pandas-profiling

pip install python-csv

from googletrans import Translator

class French_Dictionary:
    dictionary = dict()
    td = dict()
    # to get french words

    def getDictionary(self, lis):
        translator = Translator()
        translated = translator.translate(lis, src='en', dest='fr')
        for trans in translated:
            print(f'{trans.origin} -> {trans.text}')
            self.dictionary[trans.origin] = trans.text
        return self.dictionary

from google.colab import files
uploaded = files.upload()

from google.colab import files
uploaded = files.upload()

from google.colab import files
uploaded = files.upload()

f = open("find_words.txt", "r")
keyword = list()
# get list
a = f.readlines()
for i in a:
    i = i.replace('\n', '')
    keyword.append(i)
print(keyword)

fdict =French_Dictionary()
dictionary = fdict.getDictionary(keyword)
print(dictionary)

import pandas
df = pandas.read_csv("innovators.csv")

print(df)

dictionary=dict()
x=list(df['ENG'])
y=list(df['FRENCH'])
for i in range(0,len(y)):
  dictionary[x[i]]=y[i]
print(dictionary)

import re
import time
import tracemalloc

class trans:
  data=''
  time_for_translate=list()
  memory_for_translate=list()
  def __init__(self):
    fin = open("t8.shakespeare.txt", "rt")
    self.data = fin.read()

  def change_word(self,words):
    start = time.time()
    tracemalloc.start()
    x = re.findall(words,data)
    y = re.findall(words.capitalize(),data)
    # countw.append(len(x)+len(y))
    self.data = self.data.replace(words,dictionary[words])
    # print(words,dictionary[words])
    self.data = self.data.replace(words.capitalize(),dictionary[words].capitalize())
    end = time.time()
    self.time_for_translate.append(end-start)
    current, peak = tracemalloc.get_traced_memory()
    # print(f"Current memory usage is {current / 10**6}MB; Peak was {peak / 10**6}MB")
    self.memory_for_translate.append(current / 10**6)
    tracemalloc.stop()
    
    return len(x)+len(y)

  def get_Content(self):
    return self.data
  def get_time(self):
    return self.time_for_translate
  def get_memory(self):
    return self.memory_for_translate
count=list()
t=trans()

for words in dictionary:
  c=t.change_word(words)
  count.append(c)
datas=t.get_Content()
times=t.get_time()
memos=t.get_memory()
print(count)
print(times)
print(memos)

fin.close()



fin = open("output.txt", "wt")
# overrite the input file with the resulting data
fin.write(datas)
# close the file
fin.close()

files.download('output.txt')

import csv
with open('analysis.csv', 'w', newline='') as file:
    writer = csv.writer(file)
    writer.writerow(["S.NO", "ENGLISH WORD", "FRENCH WORD","Frequency_of_replaced","Time_taken_for_process","Memory_taken_for_process",'Peek_Memory'])
    c=1
    for i in dictionary:
      writer.writerow([c,i,dictionary[i],count[c-1],times[c-1],memos[c-1]])
      c=c+1

files.download('analysis.csv')