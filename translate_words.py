# -*- coding: utf-8 -*-
"""translate_words.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1WRwerJdNRcucufBLqNx9h3ub_3YDpcRb

# **Translate Words Challenge**

The task at had is that, given a text file, replace all possible words in English to French using any programming language of choice

## What is the input?
1.	A text file that has more than one lakh lines. The file is t8.shakespeare.txt.
2.	A replace words list that has a 1000 words. The words in the list should be replaced with case being maintained. The file is find_words.txt

## What needs to be done?
1.	Find an English to French dictionary
2.	Read the text file, replace words and dictionary
3.	Find all words that in the replace words list that has a replacement in the dictionary
4.	Replace the words in the text file
5.	save the processed file

## What is the expected output?
1.	Unique list of words that was replaced with French words from the dictionary
2.	Number of times a word was replace
3.	Frequency of each word replaced
4.	Accuracy of the replace in terms of all occurences, casing and special characters to be maintained accurately
5.	Time taken to process
6.	Memory taken to process
"""

pip install googletrans

pip install python-csv

from googletrans import Translator
import pandas
import re
import time
import tracemalloc
import csv

from google.colab import files
uploaded = files.upload()

from google.colab import files
uploaded = files.upload()

from google.colab import files
uploaded = files.upload()

class French_Dictionary:
    dictionary = dict()
    td = dict()
    # to get french words
    def getDictionary(self, lis):
        """
        input:Get a list of english word
        process:convert the english word to french
        Return:Dictionary with english word as key and french word as value
        """
        translator = Translator()
        translated = translator.translate(lis, src='en', dest='fr')
        for trans in translated:
            print(f'{trans.origin} -> {trans.text}')
            self.dictionary[trans.origin] = trans.text
        return self.dictionary

#Opening text file
f = open("find_words.txt", "r")
keyword = list()
a = f.readlines()

#collecting the english words
for i in a:
    i = i.replace('\n', '')
    keyword.append(i)
print(keyword)

# fdict =French_Dictionary()
# dictionary = fdict.getDictionary(keyword)
# print(dictionary)

df = pandas.read_csv("innovators.csv")
print(df)

# Collecting the english and french words
dictionary=dict()
x=list(df['ENG'])
y=list(df['FRENCH'])

# creating a dictionary
for i in range(0,len(y)):
  dictionary[x[i]]=y[i]
print(dictionary)

class trans:
  """
  """
  data=''
  time_for_translate=list()
  memory_for_translate=list()
  frequency=list()

  def __init__(self):
    fin = open("t8.shakespeare.txt", "rt")
    self.data = fin.read()

  def change_word(self,words):
    """
    input: english word
    Process:translate the eng words with 
    french words in the text and collecting other details
    """

    # start tracking the memory and time useage
    start = time.time()
    tracemalloc.start()

    #Count the number of times words need to be replaced
    x = re.findall(words,self.data)
    y = re.findall(words.capitalize(),self.data)

    # changing to french words
    self.data = self.data.replace(words,dictionary[words])
    self.data = self.data.replace(words.capitalize(),dictionary[words].capitalize())
    
    # stop tracking the memory and time useage
    end = time.time()
    current, peak = tracemalloc.get_traced_memory()

    # Adding the information
    self.time_for_translate.append(end-start)
    self.memory_for_translate.append(current / 10**6)
    self.frequency.append(len(x)+len(y))
    tracemalloc.stop()
    return len(x)+len(y)

  def get_Content(self):
    """
    to get the translated content
    """
    return self.data
  def get_time(self):
    """
    to get the Time details
    """
    return self.time_for_translate
  def get_memory(self):
    """
    to get the Memory details
    """
    return self.memory_for_translate
  def get_frequency(self):
    """
    to get the frequency details
    """
    return self.memory_for_translate

# creating object 
count=list()
t=trans()
for words in dictionary:
  c=t.change_word(words)
  count.append(c)

# Getting details
datas=t.get_Content()
times=t.get_time()
memos=t.get_memory()
frequency=t.get_frequency()


# printing details
print(count)
print(times)
print(memos)

# Creating output file
fin = open("output.txt", "wt")
# writing the file with the resulting data
fin.write(datas)
# close the file
fin.close()

files.download('output.txt')

# creating a csv file
with open('analysis.csv', 'w', newline='') as file:
    writer = csv.writer(file)
    writer.writerow(["S.NO", "ENGLISH WORD", "FRENCH WORD","Frequency_of_replaced","Time_taken_for_process","Memory_taken_for_process"])
    c=1
    for i in dictionary:
      # writing the word details in the csv file
      writer.writerow([c,i,dictionary[i],count[c-1],str(times[c-1])+"'s",str(memos[c-1])+"MB"])
      c=c+1

files.download('analysis.csv')